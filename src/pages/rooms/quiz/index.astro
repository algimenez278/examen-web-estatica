---
import MainLayout from "../../../layouts/MainLayout.astro";
import Button from "../../../components/Button.astro";
const initialTime = 45;
const { title = "Quiz ü§ì‚ùî" } = Astro.props;
---

<MainLayout title="Quiz Dev">
  <main class="quiz" data-initial-time={initialTime}>
    <section class="header">
      <div class="navigation-button">
        <Button
          href="/rooms/hangman"
          title="Volver a habitaci√≥n anterior"
          direction="left"
          id="btn-prev"
        />
      </div>

      <div class="quiz-title">
        <h1>{title}</h1>
      </div>

      <div class="navigation-button">
        <Button
          href="/rooms/rosco"
          title="Ir a habitaci√≥n siguiente"
          id="btn-next"
          disabled={true}
        />
      </div>
    </section>

    <section class="quiz-progress">
      <article class="quiz-progress--counter">
        <span id="current-question"> 1</span>
        <span id="total-questions">/ 5</span>
      </article>

      <article class="timer">
        <span id="remaining-time">{initialTime}</span> segundos ‚è±Ô∏è
      </article>
    </section>
    <div class="quiz-content">
      <h4 id="question-text"></h4>

      <section id="options-container">
        <button id="option-1" class="option__button">1</button>
        <button id="option-2" class="option__button">2</button>
        <button id="option-3" class="option__button">3</button>
        <button id="option-4" class="option__button">4</button>
      </section>
    </div>

    <section class="action-controls">
      <button
        class="action-button action-button--next"
        id="next-question"
        disabled
      >
        Siguiente
      </button>
    </section>
  </main>
</MainLayout>

<style>
  :root {
    --pink: #f4b8e4;
    mauve: #c6a0f6;
  }
  html,
  body {
    height: 100%;
  }

  body {
    background-color: var(--base);
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    padding: 0.8rem;
    overflow: hidden;
    color: var(--letter);
    box-sizing: border-box;
  }

  .quiz {
    width: 85vw;
    max-width: 700px;
    background-image: linear-gradient(to bottom, var(--mauve), var(--sky));
    box-shadow: 0 0 20px rgba(61, 125, 179, 0.664);
    border-radius: 12px;
    padding: 1.2rem;
    display: grid;
    grid-template-rows: auto auto 1fr auto auto;
    grid-gap: 0.8rem;
    align-items: stretch;
    box-sizing: border-box;
    overflow: hidden;
  }

  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .quiz-title {
    text-align: center;
    color: var(--mantle);
  }

  .quiz-progress {
    font-weight: 600;
  }

  .quiz-progress--counter {
    font-size: clamp(0.85rem, 2vw, 0.95rem);
    text-align: center;
    color: var(--over);
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.4rem;
  }
  .timer {
    text-align: center;
    background: var(--sky);
    color: var(--over);
    border-radius: 8px;
    font-size: clamp(0.85rem, 2vw, 0.95rem);
    padding: 0.4rem 0.8rem;
    font-size: 1.2rem;
  }
  /* preguntas */
  #question-text {
    padding: 0.8rem;
    color: var(--letters);
    text-align: center;
    background: var(--over);
    border-radius: 6px;
    line-height: 1.3;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    white-space: pre-line;
    font-size: clamp(0.9rem, 2.2vw, 1rem);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    height: auto;
    word-wrap: break-word;
  }

  #options-container {
    list-style: none;
    padding: 0;
    margin: 0.8rem 0;
    display: grid;
    grid-template-rows: repeat(4, 1fr);
    gap: 0.6rem;
    min-height: 0;
  }
  /* respuestas */
  .option__button {
    background-image: linear-gradient(to bottom, var(--mauve), var(--pink));
    color: var(--base);
    padding: 0.8rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    border: 2px solid transparent;
    font-size: clamp(0.8rem, 2vw, 0.9rem);
    font-weight: 500;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    box-sizing: border-box;
    font-family: inherit;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    text-align: left;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .option_button:hover {
    background: oklch(0.85 0.01 242.99);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    border-color: oklch(0.7 0.02 242.99);
  }

  .correct {
    background: linear-gradient(135deg, #c8e6c9, #a5d6a7);
    border-color: var(--green) !important;
    animation: correctPulse 0.6s ease;
  }

  .incorrect {
    background: linear-gradient(135deg, #ffcdd2, #ef9a9a);
    border-color: var(--red) !important;
    animation: incorrectShake 0.6s ease;
  }

  .option-icon {
    font-size: 1.1rem;
    margin-left: 0.4rem;
  }

  .action-controls {
    margin: 0;
  }

  .action-button {
    cursor: pointer;
    width: 100%;
    font-family: inherit;
    font-size: clamp(0.9rem, 2.2vw, 1rem);
    font-weight: 600;
    border: none;
    padding: 0.8rem 1.6rem;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
    transition: all 0.3s ease;
  }

  .action-button--next {
    background: var(--letter);
    color: var(--over);
  }

  .action-button:hover:not(:disabled) {
    background: var(--button-hover);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
  }

  .action-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  @keyframes correctPulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }

  @keyframes incorrectShake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-5px);
    }
    75% {
      transform: translateX(5px);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.98);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @media (max-width: 768px) {
    body {
      padding: 0.6rem;
    }

    .quiz {
      height: calc(100vh - 1.2rem);
      padding: 1rem;
      grid-gap: 0.6rem;
    }

    .quiz-title h1 {
      font-size: clamp(1.1rem, 3.5vw, 1.4rem);
    }

    .quiz-progress {
      padding: 0.5rem 0.7rem;
    }

    #question-text {
      padding: 0.7rem;
      font-size: clamp(0.85rem, 2.2vw, 0.95rem);
      overflow: hidden;
      height: auto;
      word-wrap: break-word;
    }

    #options-container {
      gap: 0.5rem;
    }

    .option__button {
      padding: 0.7rem 0.9rem;
      font-size: clamp(0.75rem, 2vw, 0.85rem);
    }

    .action-button {
      padding: 0.7rem 1.4rem;
      font-size: clamp(0.85rem, 2.2vw, 0.95rem);
    }
  }

  @media (max-width: 480px) {
    body {
      padding: 0.4rem;
    }

    .quiz {
      width: calc(100vw - 0.8rem);
      height: calc(100vh - 0.8rem);
      padding: 0.8rem;
      grid-gap: 0.5rem;
      border-radius: 10px;
    }

    .quiz-title h1 {
      font-size: clamp(1rem, 4.5vw, 1.2rem);
    }

    .quiz-progress {
      padding: 0.4rem 0.6rem;
      flex-direction: column;
      gap: 0.4rem;
    }

    .quiz-progress--counter,
    .timer {
      font-size: clamp(0.8rem, 3vw, 0.9rem);
    }

    #question-text {
      padding: 0.6rem;
      font-size: clamp(0.8rem, 3vw, 0.9rem);
      overflow: hidden;
      height: auto;
      line-height: 1.2;
      word-wrap: break-word;
    }

    #options-container {
      gap: 0.4rem;
    }

    .option__button {
      padding: 0.6rem 0.8rem;
      font-size: clamp(0.7rem, 2.8vw, 0.8rem);
      line-height: 1.1;
      white-space: normal;
      text-overflow: initial;
      height: auto;
      min-height: 2.2rem;
    }

    .action-button {
      padding: 0.6rem 1.2rem;
      font-size: clamp(0.8rem, 3vw, 0.9rem);
    }
  }

  @media (max-height: 600px) {
    body {
      padding: 0.2rem;
    }

    .quiz {
      height: calc(100vh - 0.4rem);
      padding: 0.6rem;
      grid-gap: 0.3rem;
    }

    .quiz-title h1 {
      font-size: clamp(0.9rem, 3.5vw, 1.1rem);
    }

    .quiz-progress {
      padding: 0.3rem 0.5rem;
    }

    #question-text {
      padding: 0.5rem;
      font-size: clamp(0.75rem, 2.2vw, 0.85rem);
      overflow: hidden;
      height: auto;
      word-wrap: break-word;
    }

    #options-container {
      gap: 0.3rem;
    }

    .option__button {
      padding: 0.5rem 0.6rem;
      font-size: clamp(0.65rem, 2vw, 0.75rem);
      min-height: 1.8rem;
    }

    .action-button {
      padding: 0.5rem 1rem;
      font-size: clamp(0.75rem, 2.2vw, 0.85rem);
    }
  }

  @media (max-height: 500px) and (orientation: landscape) {
    .quiz {
      grid-gap: 0.3rem;
      padding: 0.5rem;
    }

    .quiz-progress {
      flex-direction: row;
      padding: 0.3rem 0.5rem;
    }

    #question-text {
      overflow: hidden;
      max-height: 2rem;
      padding: 0.4rem;
      font-size: 0.75rem;
      word-wrap: break-word;
    }

    #options-container {
      gap: 0.25rem;
    }

    .option__button {
      padding: 0.3rem 0.5rem;
      font-size: 0.7rem;
      min-height: 1.6rem;
    }

    .action-button {
      padding: 0.4rem 0.8rem;
      font-size: 0.75rem;
    }
  }
</style>

<script type="module">
  // Preguntas
  const questions = [
    {
      question: "¬øQu√© representa una variable en programaci√≥n?",
      options: [
        "Una funci√≥n que se ejecuta autom√°ticamente",
        "Un archivo externo",
        "Una estructura visual",
        "Un espacio de memoria con un nombre que guarda un valor",
      ],
      answer: "Un espacio de memoria con un nombre que guarda un valor",
    },
    {
      question:
        "¬øQu√© imprime este c√≥digo?\nlet edad = 18;\nconsole.log(edad >= 18);",
      options: ["null", '"true"', "undefined", "true"],
      answer: "true",
    },
    {
      question: "¬øCu√°l es la diferencia entre for y while?",
      options: [
        "while solo se usa para arrays",
        "for siempre es m√°s r√°pido",
        "while no puede usar condiciones",
        "for se usa cuando sabemos cu√°ntas veces repetir; while cuando no",
      ],
      answer:
        "for se usa cuando sabemos cu√°ntas veces repetir; while cuando no",
    },
    {
      question:
        "¬øQu√© hace este c√≥digo?\nlet x = 10;\nif (x % 2 === 0) { console.log('Par'); } else { console.log('Impar'); }",
      options: [
        "Imprime 'Impar'",
        "Lanza un error",
        "Nada, '===' no es v√°lido",
        "Imprime 'Par' si el n√∫mero es divisible por 2",
      ],
      answer: "Imprime 'Par' si el n√∫mero es divisible por 2",
    },
    {
      question: "¬øQu√© es un array en programaci√≥n?",
      options: [
        "Estructura que contiene funciones",
        "Tipo de objeto solo de strings",
        "Espacio de memoria aleatorio",
        "Una colecci√≥n ordenada de elementos",
      ],
      answer: "Una colecci√≥n ordenada de elementos",
    },
    {
      question:
        "¬øQu√© imprime este c√≥digo?\nlet arr = [10, 20, 30];\narr.push(40);\nconsole.log(arr.length);",
      options: ["3", "undefined", "arr", "4"],
      answer: "4",
    },
    {
      question: "¬øQu√© es una funci√≥n pura?",
      options: [
        "Modifica variables globales",
        "Depende del estado externo",
        "Se ejecuta una vez",
        "Siempre da el mismo resultado sin efectos secundarios",
      ],
      answer: "Siempre da el mismo resultado sin efectos secundarios",
    },
    {
      question:
        "¬øQu√© hace este c√≥digo?\nsetTimeout(() => { console.log('Hola'); }, 0);\nconsole.log('Mundo');",
      options: [
        "Imprime Hola Mundo",
        "Lanza error de concurrencia",
        "Espera al sistema operativo",
        "Imprime 'Mundo' luego 'Hola'",
      ],
      answer: "Imprime 'Mundo' luego 'Hola'",
    },
    {
      question: "¬øQu√© hace una estructura tipo pila?",
      options: [
        "Saca elementos de cualquier lugar",
        "Busca en bases de datos",
        "Lee datos en paralelo",
        "Accede en orden LIFO",
      ],
      answer: "Accede en orden LIFO",
    },
    {
      question:
        "¬øQu√© hace este c√≥digo?\nconst persona = { nombre: 'Ana' };\nObject.freeze(persona);\npersona.nombre = 'Luis';\nconsole.log(persona.nombre);",
      options: [
        "Cambia el nombre a Luis",
        "Elimina el objeto",
        "Crea una copia",
        "Imprime 'Ana' porque est√° congelado",
      ],
      answer: "Imprime 'Ana' porque est√° congelado",
    },
    {
      question:
        "¬øQu√© se imprime?\nfunction saludar(nombre) {\n  return `Hola, ${nombre}`;\n}\nconsole.log(saludar('Juan'));",
      options: ["Hola, Juan", "Hola", "undefined", "Error"],
      answer: "Hola, Juan",
    },
    {
      question:
        "¬øQu√© hace este c√≥digo?\nsetTimeout(() => {\n  console.log('Hola');\n}, 1000);",
      options: [
        "Imprime 'Hola' inmediatamente",
        "Nunca imprime nada",
        "Imprime 'Hola' despu√©s de 1 segundo",
        "Lanza un error",
      ],
      answer: "Imprime 'Hola' despu√©s de 1 segundo",
    },
    {
      question:
        "¬øQu√© valor imprime?\nasync function test() {\n  return 'hecho';\n}\ntest().then(console.log);",
      options: ["undefined", "hecho", "Promise", "Error"],
      answer: "hecho",
    },
    {
      question: "¬øQu√© se imprime?\nconsole.log(typeof function() {});",
      options: ["object", "function", "undefined", "Error"],
      answer: "function",
    },
    {
      question:
        "¬øQu√© hace este c√≥digo?\ndocument.querySelector('h1').textContent = 'Hola mundo';",
      options: [
        "Cambia el texto de un <h1>",
        "Agrega un nuevo h1",
        "Elimina el h1",
        "Lanza error siempre",
      ],
      answer: "Cambia el texto de un <h1>",
    },
    {
      question:
        "¬øQu√© pasa aqu√≠?\nconst boton = document.getElementById('miBoton');\nboton.addEventListener('click', () => alert('Clic!'));",
      options: [
        "Muestra 'Clic!' al hacer clic",
        "No hace nada",
        "Elimina el bot√≥n",
        "Agrega un nuevo bot√≥n",
      ],
      answer: "Muestra 'Clic!' al hacer clic",
    },
    {
      question:
        "¬øQu√© ocurre si se ejecuta este c√≥digo fuera de una funci√≥n async?\nlet x = await Promise.resolve(42);",
      options: ["undefined", "Error de sintaxis", "42", "Promise"],
      answer: "Error de sintaxis",
    },
  ];

  let currentQuestionIndex = 0;
  let selectedQuestions = [];
  let hasAnswered = false;

  const initialTime = parseInt(
    document.querySelector("main.quiz").dataset.initialTime
  );
  let time = initialTime;
  let timerInterval;

  const questionElement = document.getElementById("question-text");
  const optionButtons = document.querySelectorAll(".option__button");
  const nextButton = document.getElementById("next-question");
  const currentSpan = document.getElementById("current-question");
  const totalSpan = document.getElementById("total-questions");
  const remainingTime = document.getElementById("remaining-time");
  const nextRoomButton = document.getElementById("btn-next");

  // Iniciar juego
  function startGame() {
    selectedQuestions = [...questions]
      .sort(() => Math.random() - 0.5)
      .slice(0, 5);
    totalSpan.textContent = `/ ${selectedQuestions.length}`;
    currentQuestionIndex = 0;
    time = initialTime;
    displayQuestion();
    startTimer();
  }

  function startTimer() {
    clearInterval(timerInterval);
    remainingTime.textContent = time;
    timerInterval = setInterval(() => {
      time--;
      remainingTime.textContent = time;
      if (time <= 0) {
        clearInterval(timerInterval);
        resetToFirstQuestion();
      }
    }, 1000);
  }

  function displayQuestion() {
    const question = selectedQuestions[currentQuestionIndex];
    questionElement.innerHTML = question.question.replace(/\n/g, "<br>");
    nextButton.disabled = true;
    hasAnswered = false;

    const shuffledOptions = [...question.options].sort(
      () => Math.random() - 0.5
    );

    optionButtons.forEach((btn, index) => {
      btn.textContent = shuffledOptions[index];
      btn.classList.remove("correct", "incorrect");
      btn.disabled = false;

      const icon = btn.querySelector(".option-icon");
      if (icon) icon.remove();

      btn.onclick = () => selectOption(btn, question.answer);
    });

    currentSpan.textContent = currentQuestionIndex + 1;
  }

  function selectOption(button, correctAnswer) {
    if (hasAnswered) return;
    hasAnswered = true;

    const allOptions = document.querySelectorAll(".option__button");
    allOptions.forEach((btn) => (btn.disabled = true));

    if (button.textContent === correctAnswer) {
      button.classList.add("correct");
      addIcon(button, "‚úÖ");
      nextButton.disabled = false;
    } else {
      button.classList.add("incorrect");
      addIcon(button, "‚ùå");

      allOptions.forEach((btn) => {
        if (btn.textContent === correctAnswer) {
          btn.classList.add("correct");
          addIcon(btn, "‚úÖ");
        }
      });
      if (currentQuestionIndex < selectedQuestions.length - 1) {
        setTimeout(resetToFirstQuestion, 1500);
      } else {
        setTimeout(showVictory, 1500);
      }
    }
  }

  function addIcon(element, icon) {
    const span = document.createElement("span");
    span.textContent = icon;
    span.classList.add("option-icon");
    element.appendChild(span);
  }

  function resetToFirstQuestion() {
    clearInterval(timerInterval);
    currentQuestionIndex = 0;
    time = initialTime;
    displayQuestion();
    startTimer();
  }

  nextButton.addEventListener("click", () => {
    currentQuestionIndex++;
    if (currentQuestionIndex < selectedQuestions.length) {
      displayQuestion();
    } else {
      showVictory();
    }
  });

  function showVictory() {
    clearInterval(timerInterval);
    enableNavigationButtons();
  }

  function enableNavigationButtons() {
    if (nextRoomButton) {
      nextRoomButton.removeAttribute("disabled");
      nextRoomButton.style.opacity = "1";
      nextRoomButton.style.cursor = "pointer";
      nextRoomButton.classList.add("enabled");
    }

    const prevButton = document.getElementById("btn-prev");
    if (prevButton) {
      prevButton.removeAttribute("disabled");
      prevButton.style.opacity = "1";
      prevButton.style.cursor = "pointer";
      prevButton.classList.add("enabled");
    }

    const navLinks = document.querySelectorAll(".navigation-button a");
    navLinks.forEach((link) => {
      link.style.pointerEvents = "auto";
    });
  }

  // Iniciar
  startGame();
</script>
