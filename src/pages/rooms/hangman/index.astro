---
import MainLayout from "../../../layouts/MainLayout.astro";
import Button from "../../../components/Button.astro";
/* import Modal from "../../../components/Modal.astro"; */
const { title = "ðŸ’» Ahorcado Dev ðŸ’€" } = Astro.props;
---

<MainLayout title="Ahorcado Dev">
  <!-- <h1>ahorcado</h1> -->
  <!-- recorda quela ruta va ser http://localhost:4321/rooms/hangman -->
  <div class="hangman">
    <div class="hangman__left">
      <h1 class="hangman__title">{title}</h1>
      <p class="hangman__hint" id="hint">Pista: cargando...</p>
      <div class="hangman__word" id="word"></div>

      <form class="hangman__form" id="form">
        <input
          class="hangman__input"
          id="letter-input"
          type="text"
          maxlength="1"
          placeholder="Letra"
          autocomplete="off"
          required
        />
        <button class="hangman__button" type="submit">Adivinar</button>
      </form>

      <p class="hangman__used-letters">
        Letras usadas: <span id="used-letters"></span>
      </p>
      <p class="hangman__message" id="message"></p>
      <button class="hangman__reset" id="reset">ðŸ”„ Reiniciar</button>
    </div>

    <div class="hangman__right">
      <canvas class="hangman__canvas" id="canvas" width="200" height="250"
      ></canvas>
      <div class="component__button" id="navigation-buttons">
        <Button
          href="/rooms/memory"
          direction="left"
          title="Ir a habitaciÃ³n anterior"
          id="btn-prev"
        />
        <Button
          href="/rooms/quiz"
          direction="right"
          title="Ir a habitaciÃ³n siguiente"
          id="btn-next"
        />
      </div>
    </div>
  </div>

  <!--   <script src="/src/pages/rooms/hangman/hangman.js" ></scrip> -->
</MainLayout>

<style>
  html,
  body {
    height: 100%;
  }

  body {
    background: var(--over);
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    padding: 1rem;
    overflow: hidden;
  }

  .hangman {
    width: 90vw;
    max-width: 700px;
    height: 400px;
    background-image: linear-gradient(to bottom, var(--sky), var(--mauve));
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
    border-radius: 15px;
    padding: 1.5rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    align-items: center;
    box-sizing: border-box;
  }

  .hangman__left,
  .hangman__right {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
  }

  .hangman__title {
    font-size: clamp(1.5rem, 2.5vw, 2rem);
    color: var(--over);
  }

  .hangman__hint {
    font-style: italic;
    color: var(--base);
    font-size: 0.8rem;
    text-align: center;
  }

  .hangman__word {
    font-size: clamp(1.1rem, 3vw, 1.7rem);
    letter-spacing: 0.3em;
    word-wrap: break-word;
    color: var(--over);
    text-align: center;
  }

  .hangman__form {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .hangman__input {
    width: 50px;
    padding: 0.3rem;
    font-size: 1.2rem;
    text-align: center;
    border-radius: 5px;
    border: none;
  }

  .hangman__button,
  .hangman__reset {
    padding: 0.4rem 0.8rem;
    border-radius: 5px;
    border: none;
    background: var(--blue);
    color: var(--over);
    font-weight: bold;
    cursor: pointer;
    transition: background 0.3s ease;
    font-size: 0.8rem;
  }

  .hangman__button:hover,
  .hangman__reset:hover {
    background: var(--green);
  }

  .hangman__used-letters {
    font-size: 0.8rem;
    color: var(--over);
    word-break: break-word;
  }

  .hangman__message {
    font-size: 1rem;
    font-weight: bold;
    color: var(--red);
  }

  .hangman__canvas {
    background: var(--letter);
    border-radius: 5px;
    width: 100%;
    max-width: 220px;
    height: auto;
    margin: 0 auto;
  }

  /* Responsive */
  @media (max-width: 600px) {
    .hangman {
      grid-template-columns: 1fr;
      height: auto;
    }

    .hangman__canvas {
      max-width: 100%;
      margin-top: 1rem;
    }
  }
</style>
<script type="module">
  // hangman.js
  export function initHangman() {
    const wordEl = document.getElementById("word");
    const hintEl = document.getElementById("hint");
    const usedLettersEl = document.getElementById("used-letters");
    const messageEl = document.getElementById("message");
    const input = document.getElementById("letter-input");
    const form = document.getElementById("form");
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const resetBtn = document.getElementById("reset");

    let word = "";
    let hint = "";
    let usedLetters = [];
    let errors = 0;
    const maxErrors = 6;

    async function pickRandomWord() {
      try {
        const res = await fetch("/rooms/hangman/word.json");
        const data = await res.json();
        const words = data.record;
        const random = words[Math.floor(Math.random() * words.length)];

        word = random.word.toUpperCase();
        hint = random.hint;
        usedLetters = [];
        errors = 0;
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        hintEl.textContent = `Pista: ${hint}`;
        messageEl.textContent = "";
        updateWordDisplay();
        updateUsedLetters();
        input.disabled = false;
      } catch {
        messageEl.textContent = "No se pudo cargar la palabra ðŸ˜¢";
      }
    }

    function updateWordDisplay() {
      const display = word
        .split("")
        .map((l) => (usedLetters.includes(l) ? l : "_"))
        .join(" ");
      wordEl.textContent = display;

      if (!display.includes("_")) {
        input.disabled = true;
        messageEl.textContent = "ðŸŽ‰ Â¡Ganaste!";
        const btnPrev = document.getElementById("btn-prev");
        const btnNext = document.getElementById("btn-next");
        if (btnPrev) {
          btnPrev.disabled = false;
          btnPrev.style.cursor = "pointer";
          btnPrev.style.opacity = "1";
        }
        if (btnNext) {
          btnNext.disabled = false;
          btnNext.style.cursor = "pointer";
          btnNext.style.opacity = "1";
        }
      }
    }

    function updateUsedLetters() {
      usedLettersEl.textContent = usedLetters.join(", ");
    }

    function drawHangman() {
      ctx.beginPath();
      switch (errors) {
        case 1:
          ctx.moveTo(10, 240);
          ctx.lineTo(190, 240);
          break;
        case 2:
          ctx.moveTo(50, 240);
          ctx.lineTo(50, 20);
          ctx.lineTo(140, 20);
          ctx.lineTo(140, 40);
          break;
        case 3:
          ctx.arc(140, 60, 20, 0, Math.PI * 2);
          break;
        case 4:
          ctx.moveTo(140, 80);
          ctx.lineTo(140, 150);
          break;
        case 5:
          ctx.moveTo(140, 100);
          ctx.lineTo(120, 130);
          ctx.moveTo(140, 100);
          ctx.lineTo(160, 130);
          break;
        case 6:
          ctx.moveTo(140, 150);
          ctx.lineTo(120, 190);
          ctx.moveTo(140, 150);
          ctx.lineTo(160, 190);
          input.disabled = true;
          messageEl.textContent = `ðŸ’€ Perdiste. La palabra era: ${word}`;
          break;
      }
      ctx.stroke();
    }

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const letter = input.value.toUpperCase();

      if (!letter.match(/^[A-ZÃ‘]$/)) {
        messageEl.textContent = "IngresÃ¡ una letra vÃ¡lida (A-Z)";
        return;
      }

      if (usedLetters.includes(letter)) {
        messageEl.textContent = "Ya usaste esa letra ðŸ˜…";
        return;
      }

      document.getElementById("btn-prev")?.setAttribute("disabled", true);
      document.getElementById("btn-next")?.setAttribute("disabled", true);

      usedLetters.push(letter);

      if (word.includes(letter)) {
        updateWordDisplay();
      } else {
        errors++;
        drawHangman();
      }

      updateUsedLetters();
      input.value = "";
      input.focus();
    });

    resetBtn.addEventListener("click", () => {
      pickRandomWord();
      input.focus();
    });

    pickRandomWord();
  }

  // âœ… Solo ejecutar en el navegador (evita error en el build de Astro)
  if (typeof window !== "undefined" && typeof document !== "undefined") {
    initHangman();
  }
</script>
